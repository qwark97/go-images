// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	storage "github.com/qwark97/go-images/storage"
	mock "github.com/stretchr/testify/mock"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// Create provides a mock function with given fields: data
func (_m *Storage) Create(data storage.CreateData) (storage.CreateResp, error) {
	ret := _m.Called(data)

	var r0 storage.CreateResp
	if rf, ok := ret.Get(0).(func(storage.CreateData) storage.CreateResp); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(storage.CreateResp)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(storage.CreateData) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Disconnect provides a mock function with given fields:
func (_m *Storage) Disconnect() {
	_m.Called()
}

// Read provides a mock function with given fields:
func (_m *Storage) Read() ([]storage.ReadResp, error) {
	ret := _m.Called()

	var r0 []storage.ReadResp
	if rf, ok := ret.Get(0).(func() []storage.ReadResp); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]storage.ReadResp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStorage(t mockConstructorTestingTNewStorage) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
